// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())
  username String @unique 
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text

  following Follow[] @relation(name: "Following")
  blocking  Block[]  @relation(name: "Blocking")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}
model Game {
  id          String     @id @default(uuid())
  name        String
  description String     @db.Text
  imageUrl    String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  sportId     String
  sport       Sport      @relation(fields: [sportId], references: [id])
  highlights  Highlight[]

  @@index([sportId])
}

model Sport {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  games       Game[]
  


  followedBy  Follow[]  @relation(name: "FollowedBy")
  blockedBy   Block[]   @relation(name: "BlockedBy")
}

model Follow {
  id              String    @id @default(uuid())
  followerId      String
  sportId         String
  sportName       String

  follower        User      @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  beingFollowed   Sport     @relation(name: "FollowedBy", fields: [sportId], references: [id], onDelete: Cascade)  

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, sportId])
  @@index([followerId])
  @@index([sportId])
}

model Block {
  id String @id @default(uuid())

  blockerId String
  blockedSportId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedSport Sport @relation(name: "BlockedBy", fields: [blockedSportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedSportId])
  @@index([blockerId])
  @@index([blockedSportId])
}

model Highlight {
  id          String     @id @default(uuid())
  url         String
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  gameId     String
  game       Game      @relation(fields: [gameId], references: [id])

  

  @@index([gameId])
}

// model Team {
//   id          String     @id @default(uuid())
//   name        String
//   imageUrl    String     @db.Text
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
// }

// model Highlight {
//   id          String     @id @default(uuid())
//   url         String
//   description String     @db.Text
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt

//   eventId     String
//   event       Event      @relation(fields: [eventId], references: [id])
// }
