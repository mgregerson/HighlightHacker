// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  bio            String? @db.Text

  following Follow[] @relation(name: "Following")
  blocking  Block[]  @relation(name: "Blocking")

  likes      Like[] @relation(name: "UserLikes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id          String   @id @default(uuid())

  userId      String
  user        User     @relation(name: "UserLikes", fields: [userId], references: [id])

  highlightId String
  highlight   Highlight @relation(name: "HighlightLikes", fields: [highlightId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, highlightId])

  @@index([highlightId])
}

model Highlight {
  id          String   @id @default(uuid())
  url         String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  youtubeId   String
  sportId     String
  sport       Sport    @relation(fields: [sportId], references: [id])

  likes       Like[] @relation(name: "HighlightLikes")

  @@index([sportId])
}

model Sport {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  games Game[]
  teams Team[]
  highlights Highlight[]

  followedBy Follow[] @relation(name: "FollowedBy")
  blockedBy  Block[]  @relation(name: "BlockedBy")
}

model Game {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  imageUrl    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sportId String
  sport   Sport  @relation(fields: [sportId], references: [id])

  homeTeamId String?
  homeTeam   Team?   @relation("homeTeam", fields: [homeTeamId], references: [id])

  awayTeamId String?
  awayTeam   Team?   @relation("awayTeam", fields: [awayTeamId], references: [id])

  // highlights Highlight[]

  @@index([sportId])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sportId String
  sport   Sport  @relation(fields: [sportId], references: [id])

  homeTeamGames Game[] @relation("homeTeam")
  awayTeamGames Game[] @relation("awayTeam")

  @@index([sportId])
}





model Follow {
  id         String @id @default(uuid())
  followerId String
  sportId    String
  sportName  String

  follower      User  @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  beingFollowed Sport @relation(name: "FollowedBy", fields: [sportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, sportId])
  @@index([followerId])
  @@index([sportId])
}

model Block {
  id String @id @default(uuid())

  blockerId      String
  blockedSportId String

  blocker      User  @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedSport Sport @relation(name: "BlockedBy", fields: [blockedSportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedSportId])
  @@index([blockerId])
  @@index([blockedSportId])
}


